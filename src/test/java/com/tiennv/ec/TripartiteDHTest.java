package com.tiennv.ec;

import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.assertEquals;

/**
 * We create an example tripartite Diffie-Helman key exchange.
 */
public class TripartiteDHTest {

    @Test
    public void gt1Test() {
        G1 g1 = new G1(CurvePoint.GENERATOR);
//        assertEquals(g1.multiplyBaseScalar(Fp256BN.n).getCurvePoint(), CurvePoint.POINT_INFINITY);

        G2 g2 = new G2(TwistPoint.GENERATOR);
//        assertEquals(g2.multiplyBaseScalar(Fp256BN.n).getTwistPoint(), TwistPoint.POINT_INFINITY);

        GT test = GT.pair(g1, g2);
        test = test.multiplyScalar(BigInteger.ONE);
        test.print();

//        aAffine: ((21167961636542580255011770066570541300993051739349375019639421053990175267184,64746500191241794695844075326670126197795977525365406531717464316923369116492),
//                  (20666913350058776956210519119118544732556678129809273996262322366050359951122,17778617556404439934652658462602675281523610326338642107814333856843981424549), (0,1))

// q: Jacobian{x=GFp2{x=21167961636542580255011770066570541300993051739349375019639421053990175267184, y=64746500191241794695844075326670126197795977525365406531717464316923369116492},
//                    y=GFp2{x=20666913350058776956210519119118544732556678129809273996262322366050359951122, y=17778617556404439934652658462602675281523610326338642107814333856843981424549}, z=GFp2{x=0, y=1}}

        // minusQ2:  ((12483622919132113353200342964078169947900088167190446483984743529646370574633,51437640641673358357110583711376862623211907662081545230599559374817128893956),
        // (20666913350058776956210519119118544732556678129809273996262322366050359951122,17778617556404439934652658462602675281523610326338642107814333856843981424549), (0,1))

        // minusQ2: Jacobian{x=GFp2{x=12483622919132113353200342964078169947900088167190446483984743529646370574633, y=51437640641673358357110583711376862623211907662081545230599559374817128893956},
        // y=GFp2{x=20666913350058776956210519119118544732556678129809273996262322366050359951122, y=17778617556404439934652658462602675281523610326338642107814333856843981424549}, z=GFp2{x=0, y=1}}

//        a:  (36219265319674612070475345276899645012589698912475496916625351741855320899263,58263102092682578419539873394693346183309756675764684324960822325345247019438)
//        b:  (20676702811272931040749119379172492094459058077130000297510355763258814210269,59334188713230657840940465064084365829784723869942431608405413213366553580122)
//        c:  (12385709223739044258810470885290553967932268171857955002300943972967891427172,39403171171346422124885825785020223302261624352258600458989197005456231324209)

// GFp12{x=GFp6{x=GFp2{x=0, y=0}, y=GFp2{x=36219265319674612070475345276899645012589698912475496916625351741855320899263, y=58263102092682578419539873394693346183309756675764684324960822325345247019438},
// z=GFp2{x=20676702811272931040749119379172492094459058077130000297510355763258814210269, y=59334188713230657840940465064084365829784723869942431608405413213366553580122}},
// y=GFp6{x=GFp2{x=0, y=0}, y=GFp2{x=0, y=0},
// z=GFp2{x=12385709223739044258810470885290553967932268171857955002300943972967891427172, y=39403171171346422124885825785020223302261624352258600458989197005456231324209}}}


//        newR: ((6235064372991814398324834608363495845874461728220206638762319490629636430094,50488572945253445045965981207811658166490059748782840504369215786452184846870),
// (9163481778269444907198514050191737230706316199105205684480520101308934508201,21280601789781382540092696218372244177118884789477138075750487532338632432740),
// (61904122389711842668093821021037267250842291064658514821301909033622211214990,38899619478898347268375872610514873481553612492652602564160559518784080222785))

//        GFp12{x=GFp6{x=GFp2{x=14195021604270630818711874327949755564317769486124611971916982166452823847739, y=1927442636646608696673569486325869963411417419176043250031978114546730987713}, y=GFp2{x=27747885220796440763100183683287681729775838570616201042760041848860190894050, y=16748425406378753194616985289844054299788395942175102697138927246230132601496}, z=GFp2{x=7730798072969330837065125448647901158628299159752724416152202772317935519374, y=58743001586433863792432465568824887627034637070875206033368403678309348844072}}, y=GFp6{x=GFp2{x=40414190755921579942599820083818469477840178098883590897203656501741587012933, y=12153242974289942122372374860375440903244569308734712231930994869604503456604}, y=GFp2{x=52624028944830282177680584509615196788853339732015446111523878102481567044363, y=21432524452136155180692171476017358119522652470665736063298323925466308997254}, z=GFp2{x=33091003071090939199368964795479269974405951771923444993608712062414169752208, y=4576096850462862064835845041223292263189168965017704356051876757793252612779}}}


    }

    @Test
    public void gtOrderTest() {
        G1 g1 = new G1(CurvePoint.GENERATOR);
        g1.multiplyBaseScalar(Fp256BN.n).print();
        assertEquals(g1.multiplyBaseScalar(Fp256BN.n).getCurvePoint(), CurvePoint.POINT_INFINITY);
        g1.print();

        G2 g2 = new G2(TwistPoint.GENERATOR);
        g1.multiplyBaseScalar(Fp256BN.n).print();
        assertEquals(g2.multiplyBaseScalar(Fp256BN.n).getTwistPoint(), TwistPoint.POINT_INFINITY);
//        g1.print();

        GT test = GT.pair(g1, g2);
        test = test.multiplyScalar(Fp256BN.n);
        test.print();
    }

    @Test
    public void tripartiteTest() {


        BigInteger a = new BigInteger("2");
        BigInteger b = new BigInteger("199999");
        BigInteger c = new BigInteger("199999");

        G1 pa = G1.multiplyBaseScalar(a);
        pa.print();

        G2 qa = G2.multiplyBaseScalar(a);
        qa.print();

//        G1{x=GFp{4062534355977912733299777421397494108926584881726437723242321564179011504485}, y=GFp{3046900766983434549974833066048120581694938661294828292431741173134258628365}, z=GFp{1}}
//        bn256.G1(4062534355977912733299777421397494108926584881726437723242321564179011504485, 3046900766983434549974833066048120581694938661294828292431741173134258628365)


//      G2{x=GFp2{x=59927578126862636086832814129077742734260689452696771010895412296143667746211, y=54952930061809850496692595958158609574339126978755622048249382632547867406485}, y=GFp2{x=16688816548089249544807710431443648737000867162658939349813935924644263586693, y=63452769682808524161861388928032618183185319239119072364816295620689227591133}, z=GFp2{x=0, y=1}}
//        bn256.G2((59927578126862636086832814129077742734260689452696771010895412296143667746211,   54952930061809850496692595958158609574339126978755622048249382632547867406485),         (16688816548089249544807710431443648737000867162658939349813935924644263586693,   63452769682808524161861388928032618183185319239119072364816295620689227591133), (0,1))


        // bn256.G2((21167961636542580255011770066570541300993051739349375019639421053990175267184,   64746500191241794695844075326670126197795977525365406531717464316923369116492),         (20666913350058776956210519119118544732556678129809273996262322366050359951122,   17778617556404439934652658462602675281523610326338642107814333856843981424549), (0,1))
      // G2{x=GFp2{x=21167961636542580255011770066570541300993051739349375019639421053990175267184, y=64746500191241794695844075326670126197795977525365406531717464316923369116492}, y=GFp2{x=20666913350058776956210519119118544732556678129809273996262322366050359951122, y=17778617556404439934652658462602675281523610326338642107814333856843981424549}, z=GFp2{x=0, y=1}}
        /*GT test = GT.pair(pa, qa);
        test = test.multiplyScalar(Fp256BN.n);
        test.print();*/

        G1 pb = G1.multiplyBaseScalar(b);
//        pb.print();
        G2 qb = G2.multiplyBaseScalar(b);
//        qb.print();

        G1 pc = G1.multiplyBaseScalar(c);
//        pb.print();
        G2 qc = G2.multiplyBaseScalar(c);
//        qb.print();

        /*GT gta = GT.pair(pb, qc);
        gta = gta.multiplyScalar(a);
        gta.print();

        GT gtb = GT.pair(pc, qa);
        gtb = gtb.multiplyScalar(b);
        gtb.print();

        GT gtc = GT.pair(pa, qb);
        gtc = gtc.multiplyScalar(c);
        gtc.print();*/

//        GT{gFp12=
//        GFp12{x=GFp6{
//                      x=GFp2{x=57073769120875232160537685178853087767677524035541875320569117256045787099826, y=55855578800437413416493082914307264023118307658929947122482674032749252189928},
//                      y=GFp2{x=56537772493264565167421702609170836973789962048768539976645155903359757263859, y=62842614981500950693139801021209833410835400236603302640231053156538562706901},
//                      z=GFp2{x=57725205168992739932932875086639152989210454230647132796115466095472865754783, y=10856493298933950978538289152825265318872434833458213136584786451382313629040}},
//              y=GFp6{
//                      x=GFp2{x=51580560198237945316354317163764090097098801162747625335428216572743650592074, y=14568256263996298770485941462832481617005980222172497356593151169108152438111},
//                      y=GFp2{x=64987105372077533671882436512116259903945479533960410094802492078766927124142, y=40013423596311075925448794541330533606492408623725035965373462942356778782692},
//                      z=GFp2{x=54864127390759608983690760038911654812893257985123499676932962882294739871380, y=59755163281118885880197693935866829594785859440606764544657965678440511689955}}}}
    }
}
