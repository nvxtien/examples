package com.tiennv.ec;

import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * We create an example tripartite Diffie-Helman key exchange.
 */
public class TripartiteDHTest {

    @Test
    public void gt1Test() {
        G1 g1 = new G1(CurvePoint.GENERATOR);
//        assertEquals(g1.multiplyBaseScalar(Fp256BN.n).getCurvePoint(), CurvePoint.POINT_INFINITY);

        G2 g2 = new G2(TwistPoint.GENERATOR);
//        assertEquals(g2.multiplyBaseScalar(Fp256BN.n).getTwistPoint(), TwistPoint.POINT_INFINITY);

        GT test = GT.pair(g1, g2);
        test = test.multiplyScalar(Fp256BN.n);
        test.print();

//        GFp6{x=GFp2{x=0, y=0}, y=GFp2{x=64367758700390854819847256820630332749703457393222580747965106076784414332305, y=55913989924150758954236987282026402418388106696356349434659716036026976725744}, z=GFp2{x=57074792230335805035498318113883104311786893972917612396695716410678660840307, y=16400686203000018465309226445244346824468178161609881504543239161914289806623}}
//        GFp6{x=GFp2{x=57739577280026094610379225801923819299898107868817936212717743412433793631440, y=58636610915986659889219507787164485010092703207062063237258417539684148311827}, y=GFp2{x=44161078169570201506922542184154360585758540607101545728162139486619323945526, y=39628601381135017799436158330463268748708433459332450050964459794260386948705}, z=GFp2{x=62674204406862620090020671848415529578022964790502248160937846014126811284886, y=22978439804913574288001807448537360962413130304465324174720900712866943136369}}

//        GFp6{x=GFp2{x=0, y=0}, y=GFp2{x=64367758700390854819847256820630332749703457393222580747965106076784414332305, y=55913989924150758954236987282026402418388106696356349434659716036026976725744}, z=GFp2{x=57074792230335805035498318113883104311786893972917612396695716410678660840307, y=16400686203000018465309226445244346824468178161609881504543239161914289806623}}
//        GFp6{x=GFp2{x=57739577280026094610379225801923819299898107868817936212717743412433793631440, y=58636610915986659889219507787164485010092703207062063237258417539684148311827}, y=GFp2{x=44161078169570201506922542184154360585758540607101545728162139486619323945526, y=39628601381135017799436158330463268748708433459332450050964459794260386948705}, z=GFp2{x=62674204406862620090020671848415529578022964790502248160937846014126811284886, y=22978439804913574288001807448537360962413130304465324174720900712866943136369}}


    }

    @Test
    public void gtOrderTest() {
        G1 g1 = new G1(CurvePoint.GENERATOR);
        g1.multiplyBaseScalar(Fp256BN.n).print();
        assertEquals(g1.multiplyBaseScalar(Fp256BN.n).getCurvePoint(), CurvePoint.POINT_INFINITY);
        g1.print();

        G2 g2 = new G2(TwistPoint.GENERATOR);
        g1.multiplyBaseScalar(Fp256BN.n).print();
        assertEquals(g2.multiplyBaseScalar(Fp256BN.n).getTwistPoint(), TwistPoint.POINT_INFINITY);
//        g1.print();

        GT test = GT.pair(g1, g2);
        test = test.multiplyScalar(Fp256BN.n);
        test.print();
    }

    @Test
    public void tripartiteTest() {

        BigInteger a = Utils.generateKey(256);
        BigInteger b = Utils.generateKey(256);
        BigInteger c = Utils.generateKey(256);

        G1 g1_a = G1.multiplyBaseScalar(a);
//        g1_a.print();
        G2 g2_a = G2.multiplyBaseScalar(a);
//        g2_a.print();

        G1 g1_b = G1.multiplyBaseScalar(b);
//        g1_b.print();
        G2 g2_b = G2.multiplyBaseScalar(b);
//        g2_b.print();

        G1 g1_c = G1.multiplyBaseScalar(c);
//        g1_c.print();
        G2 g2_c = G2.multiplyBaseScalar(c);
//        g2_c.print();

        GT gt_a = GT.pair(g1_b, g2_c);
        gt_a = gt_a.multiplyScalar(a);
        gt_a.print();

        GT gt_b = GT.pair(g1_c, g2_a);
        gt_b = gt_b.multiplyScalar(b);
        gt_b.print();

        GT gt_c = GT.pair(g1_a, g2_b);
        gt_c = gt_c.multiplyScalar(c);
        gt_c.print();

        assertEquals(gt_a, gt_b);

        // <GFp12{x=GFp6{x=GFp2{x=2460191742125968159789411641937139428519101235957377580411272052172813612452, y=60449729230858878475391211384536789194344781196837881561105655200895780331431}, y=GFp2{x=61569363129984824556784786552945629403803347970208202811024809159553234843834, y=20573263549250651197222012688070040978473689789136414115748924861684827709107}, z=GFp2{x=19940051511689350545216299906198392510759466365789514245394536439301981899836, y=53950855305115247930348984928660245525804283643326100079968775320307673649900}}, y=GFp6{x=GFp2{x=64877248238482316694954282070464061969231796939460633740602447524881034773213, y=18187161267747030379072264386839255984486901841570076667863177947560710467984}, y=GFp2{x=27574678401682739031577351908304079784547741537619010339826150615968790659835, y=42488407246459398612962917988867239304944292501870407011357611008113588720807}, z=GFp2{x=55279784794128642746666035734463895918236405729570118810138213361779030340122, y=109721466348427412899369050448490992644960907740542240946722651330593385525}}}>
        // <GFp12{x=GFp6{x=GFp2{x=2460191742125968159789411641937139428519101235957377580411272052172813612452, y=60449729230858878475391211384536789194344781196837881561105655200895780331431}, y=GFp2{x=61569363129984824556784786552945629403803347970208202811024809159553234843834, y=20573263549250651197222012688070040978473689789136414115748924861684827709107}, z=GFp2{x=19940051511689350545216299906198392510759466365789514245394536439301981899836, y=53950855305115247930348984928660245525804283643326100079968775320307673649900}}, y=GFp6{x=GFp2{x=64877248238482316694954282070464061969231796939460633740602447524881034773213, y=18187161267747030379072264386839255984486901841570076667863177947560710467984}, y=GFp2{x=27574678401682739031577351908304079784547741537619010339826150615968790659835, y=42488407246459398612962917988867239304944292501870407011357611008113588720807}, z=GFp2{x=55279784794128642746666035734463895918236405729570118810138213361779030340122, y=109721466348427412899369050448490992644960907740542240946722651330593385525}}}>
        assertEquals(gt_b, gt_c);
    }
}
